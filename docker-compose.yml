version: '3'

services:
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    restart: unless-stopped
    volumes:
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
      - cron

  cron:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    command: bash -c '> /tmp/cron.log; tail -f /tmp/cron.log & cron -f'
    user: root
    restart: unless-stopped
    volumes:
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - mysql
      - redis

  horizon:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    command: php artisan horizon
    restart: unless-stopped
    volumes:
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - mysql
      - redis

  webpack:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    command: npm run prod
    restart: on-failure
    volumes:
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
      - cron

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network
    depends_on:
      - app

  mysql:
    image: mysql:5.7.22
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./.data/mysql:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - ./.data/redis:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
